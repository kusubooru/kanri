package main

import (
	"crypto/md5"
	"database/sql"
	"flag"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"strings"

	"golang.org/x/net/context"

	"github.com/kusubooru/shimmie"
	"github.com/kusubooru/shimmie/store"
)

//go:generate go run generate/version.go

var (
	httpAddr = flag.String("http", "localhost:8080", "HTTP listen address")
	dbDriver = flag.String("dbdriver", "mysql", "database driver")
	dbConfig = flag.String("dbconfig", "", "username:password@(host:port)/database?parseTime=true")
	loginURL = flag.String("loginurl", "/kanri/login", "login URL path to redirect to")
	//version  = flag.Bool("v", false, "print program version")
	certFile = flag.String("tlscert", "", "TLS public key in PEM format.  Must be used together with -tlskey")
	keyFile  = flag.String("tlskey", "", "TLS private key in PEM format.  Must be used together with -tlscert")
	// Set after flag parsing based on certFile & keyFile.
	useTLS bool
)

const (
	description = `Usage: kanri [options]
  Management tools for shimmie.
Options:
`
)

func usage() {
	fmt.Fprintf(os.Stderr, description)
	flag.PrintDefaults()
	fmt.Fprintf(os.Stderr, "\n")
}

func main() {
	flag.Usage = usage
	flag.Parse()
	useTLS = *certFile != "" && *keyFile != ""

	//if *version {
	//	// TheVersion is generated by go generate.
	//	fmt.Printf("teian%v\n", TheVersion)
	//	return
	//}

	// open store with new database connection and create new Shimmie
	shim := shimmie.New(store.Open(*dbDriver, *dbConfig))

	// get common conf
	common, cerr := shim.Store.GetCommon()
	if cerr != nil {
		log.Fatalln("could not get common conf:", cerr)
	}

	// app with Shimmie and common conf
	app := App{Shimmie: shim, Common: common}

	// new context
	ctx := context.Background()

	http.Handle("/kanri", shim.Auth(ctx, app.serveIndex, *loginURL))
	http.Handle("/kanri/safe", shim.Auth(ctx, app.serveSafe, *loginURL))
	http.Handle("/kanri/login", newHandler(ctx, app.serveLogin))
	http.Handle("/kanri/login/submit", newHandler(ctx, app.handleLogin))
	http.Handle("/kanri/logout", http.HandlerFunc(handleLogout))

	if useTLS {
		if err := http.ListenAndServeTLS(*httpAddr, *certFile, *keyFile, nil); err != nil {
			log.Fatalf("Could not start listening (TLS) on %v: %v", *httpAddr, err)
		}
	} else {
		if err := http.ListenAndServe(*httpAddr, nil); err != nil {
			log.Fatalf("Could not start listening on %v: %v", *httpAddr, err)
		}
	}
}

type ctxHandlerFunc func(context.Context, http.ResponseWriter, *http.Request)

func newHandler(ctx context.Context, fn ctxHandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		fn(ctx, w, r)
	}
}

type App struct {
	Shimmie *shimmie.Shimmie
	Common  *shimmie.Common
}

func (app *App) serveIndex(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	app.render(w, indexTmpl, nil)
}

func (app *App) serveSafe(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	images, err := app.Shimmie.GetSafeBustedImages("kusubooru")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	app.render(w, safeTmpl, images)
}

func (app *App) serveLogin(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	app.render(w, loginTmpl, nil)
}

func (app *App) handleLogin(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	// only accept POST method
	if r.Method != "POST" {
		http.Error(w, fmt.Sprintf("%v method not allowed", r.Method), http.StatusMethodNotAllowed)
		return
	}
	username := r.PostFormValue("username")
	password := r.PostFormValue("password")
	user, err := app.Shimmie.GetUser(username)
	if err != nil {
		if err == sql.ErrNoRows {
			app.render(w, loginTmpl, "User does not exist.")
			return
		}
		msg := fmt.Sprintf("get user %q failed: %v", username, err.Error())
		log.Print(msg)
		http.Error(w, msg, http.StatusInternalServerError)
		return
	}
	hash := md5.Sum([]byte(username + password))
	passwordHash := fmt.Sprintf("%x", hash)
	if user.Pass != passwordHash {
		app.render(w, loginTmpl, "Username and password do not match.")
		return
	}
	addr := strings.Split(r.RemoteAddr, ":")[0]
	cookieValue := shimmie.CookieValue(passwordHash, addr)
	shimmie.SetCookie(w, "shm_user", username)
	shimmie.SetCookie(w, "shm_session", cookieValue)
	http.Redirect(w, r, "/kanri", http.StatusFound)
}

func handleLogout(w http.ResponseWriter, r *http.Request) {
	shimmie.SetCookie(w, "shm_user", "")
	shimmie.SetCookie(w, "shm_session", "")
	http.Redirect(w, r, "/kanri", http.StatusFound)
}

func render(w http.ResponseWriter, t *template.Template, data interface{}) {
	if err := t.Execute(w, data); err != nil {
		msg := fmt.Sprintln("could not render template:", err)
		log.Print(msg)
		http.Error(w, msg, http.StatusInternalServerError)
		return
	}
}

func (app *App) render(w http.ResponseWriter, t *template.Template, data interface{}) {
	render(w, t, struct {
		Data   interface{}
		Common *shimmie.Common
	}{
		Data:   data,
		Common: app.Common,
	})
}

var (
	indexTmpl = template.Must(template.New("").Parse(baseTemplate + subnavTemplate + indexTemplate))
	safeTmpl  = template.Must(template.New("").Parse(baseTemplate + subnavTemplate + safeTemplate))
	loginTmpl = template.Must(template.New("").Parse(baseTemplate + loginTemplate))
)

const (
	baseTemplate = `<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Kanri</title>
	<script type='text/javascript'>
		var _gaq = _gaq || [];
		_gaq.push(['_setAccount', '{{.Common.AnalyticsID}}']);
		_gaq.push(['_trackPageview']);
		(function() {
		  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
	</script>
	<meta name="description" content="{{.Common.Description}}">
	<meta name="keywords" content="{{.Common.Keywords}}">
	<style>
		* {
			font-size: 16px; 
			line-height: 1.2;
			font-family: Verdana, Geneva, sans-serif;
		}
		a:link {
			color:#006FFA;
			text-decoration:none;
		}
		a:visited {
			color:#006FFA;
			text-decoration:none;
		}
		a:hover {
			color:#33CFFF;
			text-decoration:none;
		}
		a:active {
			color:#006FFA;
			text-decoration:none;
		}

		p, a, span {font-size: 120%;}

		body {
			list-style-type: none;
			padding-top: 0;
			margin-top: 0;
		}

		#site-title {
			font-size: 133%;
			padding: 0.5em;
			margin: 0;
		}

		#subnav {
		    background: #f6f6f6;
			padding-top: 1em;
			padding-bottom: 1em;
			border-top: 1px #ebebeb solid;
			border-bottom: 1px #ebebeb solid;
		}

		#subnav a {
		    padding: 0.5em;
		}

		#subnav subnav-button-link {
		    padding: 0.5em;
		}

		.subnav-button-form {
			display: inline;
		}

		.subnav-button-link {
			background: none!important;
			border: none;
			padding: 0!important;
			font: inherit;
			font-size: 120%;
			cursor: pointer;
			color: #006FFA;
			display: inline;
		}

		.subnav-button-link:visited {
			color:#006FFA;
			text-decoration:none;
		}
		.subnav-button-link:hover {
			color:#33CFFF;
			text-decoration:none;
		}
		.subnav-button-link:active {
			color:#006FFA;
			text-decoration:none;
		}

		#login-form label, #login-form input, #login-form button, #login-form em {
			padding: 0.5em;
			display: block;
			font-size: 120%;
			line-height:1.2;
		}

		#login-form button {
			margin-top: 0.5em;
		}

		#login-form h1 {
			padding: 0.5em;
			font-size: 120%;
		}

		.toolbar {
			padding: 0.5em;
		}
		.toolbar input, .toolbar button {
			font-size: 120%;
		}

		.suggestion {
			padding: 0.5em;
			border-top: 1px #ebebeb solid;
			border-bottom: 1px #ebebeb solid;
			border-left: 0.3em #006FFA solid;
			border-top-left-radius: 0.3em;
			border-bottom-left-radius: 0.3em;
			line-height: 200%;
		}

		.suggestion form {
			display: inline;
		}

		.suggestion textarea {
			display: block;
			font-size: 120%;
			line-height:1.2;
		}
		.suggestion:nth-of-type(even) {
		    background: #f6f6f6;
		}

		.suggestion-form {
			padding: 0.5em;
			line-height: 200%;
		}

		textarea {
			width: 70%;
		}
		@media (max-width: 768px) {
			textarea {
				width: 100%;
			}
		}

		.suggestion-form input[type=submit] {
			padding: 0.5em;
			margin-top: 0.5em;
			display: block;
		}

		.alert {
			border-radius: 4px;
			padding: 1em;
			margin-top: 0.5em;
			margin-bottom: 0.5em;
			font-size: 120%;
			width: 70%;
		}
		.alert strong {
			font-size: inherit;
		}
		@media (max-width: 768px) {
			.alert{
				width: 90%;
				padding-left:5%;
				padding-right:5%;
			}
		}

		.alert-success {
			color: #3c763d;
			background-color: #dff0d8;
			border-color: #d6e9c6;
		}

		.alert-error {
			color: #a94442;
			background-color: #f2dede;
			border-color: #ebccd1;
		}



	</style>
</head>
<body>
	<h1 id="site-title"><a href="/post/list">{{.Common.SiteTitle}}</a></h1>
	{{block "subnav" .}}{{end}}
	{{block "content" .}}{{end}}
</body>
</html>
`
	subnavTemplate = `
{{define "subnav"}}
<div id="subnav">
	<a href="/kanri">Index</a>
	<a href="/kanri/safe">Safe Approval</a>
	<form class="subnav-button-form" method="post" action="/kanri/logout">
	     <input class="subnav-button-link" type="submit" value="Logout">
	</form>
</div>
{{end}}
`
	indexTemplate = `
{{define "content"}}
<h1>Management tools for shimmie</h1>
{{end}}
`
	safeTemplate = `
{{define "content"}}
{{range $k, $v := .Data}}
<img src="/_thumbs/{{$v.Hash}}">
{{$v}}
{{end}}
{{end}}
`
	loginTemplate = `
{{define "content"}}
<form id="login-form" method="post" action="/kanri/login/submit">
<h1>Login</h1>
    <label for="username">User name</label>
    <input type="text" id="username" name="username">
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
    <button type="submit">Login</button>
	{{if .Data}}
	<em>{{.Data}}</em>
	{{end}}
</form>
{{end}}
`
)
